AWSTemplateFormatVersion: '2010-09-09'
Description: Abnormal Weather/Flight Notification Pipeline

Parameters:
  S3BucketForCode:
    Type: String
    Description: S3 bucket for Lambda code zips
    Default: trip-planner-artifacts-cc

  SenderEmail:
    Type: String
    Description: SES‚Äêverified From address
    Default: chelseacdx@gmail.com

  DBHostParameter:
    Type: String
    Description: RDS endpoint (host)
    Default: database-1.czosuqseg7y8.us-east-2.rds.amazonaws.com

  DBUserParameter:
    Type: String
    Description: RDS username
    Default: admin

  DBPasswordParameter:
    Type: String
    Description: RDS password
    Default: admin2025cc

  DBNameParameter:
    Type: String
    Description: RDS database name
    Default: Trip_Planner

Resources:
  AbnormalDataQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: abnormal-data-queue

  # 1) WriteWeatherReport Lambda + Role + Schedule
  WriteWeatherReportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowSQSSend
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt AbnormalDataQueue.Arn

  WriteWeatherReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WriteWeatherReport
      Runtime: python3.9
      Handler: app.handler
      Role: !GetAtt WriteWeatherReportRole.Arn
      Timeout: 60
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketForCode
        S3Key: write_abnormal_data.zip
      Environment:
        Variables:
          QUEUE_URL:       !Ref AbnormalDataQueue
          DB_HOST:         !Ref DBHostParameter
          DB_USER:         !Ref DBUserParameter
          DB_PASSWORD:     !Ref DBPasswordParameter
          DB_NAME:         !Ref DBNameParameter
          WEATHER_API_KEY: "{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-2:442042526278:secret:trip-planner/weather-api-keys-2514yj:SecretString:WEATHER_API_KEY}}"

  ScheduleWriteWeatherReport:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 16 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt WriteWeatherReportFunction.Arn
          Id: WriteWeatherReport
  PermissionWriteInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WriteWeatherReportFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleWriteWeatherReport.Arn

  # 2) FetchAndEmail Lambda + Role + Schedule
  FetchAndEmailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowSQSReceiveAndSES
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt AbnormalDataQueue.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  FetchAndEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchAndEmail
      Runtime: python3.9
      Handler: app.handler
      Role: !GetAtt FetchAndEmailRole.Arn
      Timeout: 60
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketForCode
        S3Key: fetch_and_email.zip
      Environment:
        Variables:
          QUEUE_URL:    !Ref AbnormalDataQueue
          SENDER_EMAIL: !Ref SenderEmail

  ScheduleFetchAndEmail:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 16 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt FetchAndEmailFunction.Arn
          Id: FetchAndEmail
  PermissionFetchInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FetchAndEmailFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleFetchAndEmail.Arn

  WriteWeatherReportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowSQSSend
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt AbnormalDataQueue.Arn
        - PolicyName: AllowSecretsFetch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - arn:aws:secretsmanager:us-east-2:442042526278:secret:trip-planner/weather-api-keys-*

  FetchAndEmailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowSQSReceiveAndSES
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt AbnormalDataQueue.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'
        - PolicyName: AllowSecretsFetch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - arn:aws:secretsmanager:us-east-2:442042526278:secret:trip-planner/weather-api-keys-*
                  - arn:aws:secretsmanager:us-east-2:442042526278:secret:trip-planner/flight-api-key-*
 
### WriteAbnormalDataFlight Lambda + Role

  WriteAbnormalDataFlightRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowSQSSend
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt AbnormalDataQueue.Arn
        - PolicyName: AllowSecretsFetch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - arn:aws:secretsmanager:us-east-2:442042526278:secret:trip-planner/flight-api-key-*

  WriteAbnormalDataFlightFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: WriteAbnormalDataFlight
      Runtime: python3.9
      Handler: app.handler
      Role: !GetAtt WriteAbnormalDataFlightRole.Arn
      Timeout: 60
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketForCode
        S3Key: write_abnormal_data_flight.zip
      Environment:
        Variables:
      Environment:
        Variables:
          QUEUE_URL:       !Ref AbnormalDataQueue
          DB_HOST:         !Ref DBHostParameter
          DB_USER:         !Ref DBUserParameter
          DB_PASSWORD:     !Ref DBPasswordParameter
          DB_NAME:         !Ref DBNameParameter
          FLIGHT_API_KEY:  "{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-2:442042526278:secret:trip-planner/flight-api-key-es3rtQ:SecretString:FLIGHT_API_KEY}}"

  ScheduleWriteAbnormalDataFlight:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(2 hours)
      State: ENABLED
      Targets:
        - Arn: !GetAtt WriteAbnormalDataFlightFunction.Arn
          Id: WriteAbnormalDataFlight

  PermissionInvokeWriteFlight:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WriteAbnormalDataFlightFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleWriteAbnormalDataFlight.Arn

  ### FetchAndEmailFlight Lambda + Role

  FetchAndEmailFlightRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowSQSReceiveAndSES
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt AbnormalDataQueue.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  FetchAndEmailFlightFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchAndEmailFlight
      Runtime: python3.9
      Handler: app.handler
      Role: !GetAtt FetchAndEmailFlightRole.Arn
      Timeout: 60
      MemorySize: 256
      Code:
        S3Bucket: !Ref S3BucketForCode
        S3Key: fetch_and_email_flight.zip
      Environment:
        Variables:
          QUEUE_URL:    !GetAtt AbnormalDataQueue.QueueUrl
          SENDER_EMAIL: !Ref SenderEmail

  ScheduleFetchAndEmailFlight:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(2 hours)
      State: ENABLED
      Targets:
        - Arn: !GetAtt FetchAndEmailFlightFunction.Arn
          Id: FetchAndEmailFlight

  PermissionInvokeFetchFlight:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FetchAndEmailFlightFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleFetchAndEmailFlight.Arn

Outputs:
  WriteAbnormalDataFlightFunction:
    Value: !Ref WriteAbnormalDataFlightFunction
  FetchAndEmailFlightFunction:
    Value: !Ref FetchAndEmailFlightFunction
